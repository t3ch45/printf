.TH man page 3 "5 October 2021" "ALX-HOLBERTON SCHOOL" "_PRINTF"
.SH NAME
.B _printf
- formatted output conversion.
.SH SYNOPSIS
.B #include "main.h"
.B int _printf(const char *
.I format
.B , ...);
.SH DESCRIPTION
The function _printf is a variadic function that produces a string according to a
.I format
and prints the output to the standard output(stdout), just like the C standard library printf function. It can also receive a variable number of arguments.
This function has been created for pair programming project  for ALX-Holberton School.
.sp
.B Return value
.sp
On success, _printf returns the number of characters printed. if
I. format
is NULL or if the functions encounters any errors, it returns -1.
.sp
.B Format of the format string
.sp
The format string can contain any characters, just like a regular string, in double quotes, which will be printed as it is. for example, _printf("Hello") will print: Hello
However, this format string can contain
.I conversion specifiers.
These start with a %, followed with a character (see
.I conversion specifiers
). Special characters like a new line are escaped, for example _printf("Hello\n") will print Hello, followed by a new line.
.sp
.B Conversion specifiers
.sp
These are characters that specify the type of the variable to be printed. The variables are separated from the format string with a comma. Each variable passed to _printf should have a conversion specifier.
.sp
.B i, d
- Both these specifiers are for
.I int
arguments. They convert the variable to a decimal number, positive or negative.
.sp
.B c
- prints a
.I single character.
.sp
.B s
- prints an entire
.I string.
.sp
.B u
- prints an
.I unsigned int.
.sp
.B x, X
- prints a number in lowercase and uppercase respectively in
.I hexadecimal
base.
.sp
.B o, b
- prints a number respectively in
.I octal
and
.I binary
base.
.sp
.B %
- Acts like an escape for the character %. To print "%", the format string should contain "%%".
.sp
.B r, R
- prints a string in reverse and in ROT13 encryption respectively.
.sp
.B S
- prints a string, but non-printable characters are printed this way: \\x, followed by the ASCII code value in uppercase hexadecimal.
.sp
.B p
- prints an address, given by a pointer variable
.sp
.B Flag characters for conversion specifiers
.sp
.B +
- prints a plus in front of positive signed integers and a minus sign in front of negative signed integers.
 + overrides a space when both flags are given.
 .sp
 .B ' '
 - prints a space in front of signed integers.
 .sp
 .B #
 - Modifier for unsigned conversions.
 .sp
 .SH SEE ALSO
 .I printf(3)
 .I _putchar.c
 .SH NOTES
 _printf uses a custom character printing function called _putchar, that uses that system call write().
 _putchar uses a static buffer of 1024 bytes and a static increament variable.
 That way, everytime _putchar is called inside _printf, the character is stored inside the buffer and the function moves to the next character,
 until _printf calls _putchar(-1), which flushes the buffer and resets the increamenting variable to 0.
 That way, _putchar only needs to call write one time, passing to it the whole buffer and the number of bytes in it, which is given by the value of the increamenting variable.
 .sp
 .SH BUGS
 No known bugs
 .SH AUTHORS
 Nandweza Allan and Chigozirim Igweamaka, cohort 4.